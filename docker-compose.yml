# Custom network with static IP range for Breeze API configuration
networks:
  zerodha-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

services:
  # 1. Redis Service (Database for both application and tests)
  redis:
    image: redis:7.2.5-alpine
    container_name: zerodha-redis
    hostname: redis
    ports:
      - "6379:6379"
    networks:
      zerodha-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. Backend Application Service (The actual runnable app)
  backend:
    build:
      context: ./backend
      dockerfile: dashboard/Dockerfile
    container_name: zerodha-backend
    ports:
      - "8080:8080"
    networks:
      zerodha-network:
        ipv4_address: 172.20.0.20
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Breeze API configuration (ENABLED)
      BREEZE_API_ENABLED: "${BREEZE_API_ENABLED:-true}"
      BREEZE_API_APPKEY: "${BREEZE_API_APPKEY:-2!T0h64f315119F87^2%8L60245j43p2}"
      BREEZE_API_SECRETKEY: "${BREEZE_API_SECRETKEY:-700U1T8l62632u`oT48`2456M6n62275}"
      BREEZE_API_SESSIONTOKEN: "${BREEZE_API_SESSIONTOKEN:-53489091}"
      # Static IP configuration for Breeze API
      BREEZE_API_STATIC_IP: "122.167.184.90"
      BREEZE_API_NETWORK_INTERFACE: "eth0"
      # Zerodha Kite API (DISABLED)
      ZERODHA_ENABLED: "${ZERODHA_ENABLED:-false}"
      # Mock Data Configuration (DISABLED WHEN USING REAL API)
      MOCK_DATA_ENABLED: "${MOCK_DATA_ENABLED:-false}"
      MOCK_SPOT_PRICE: "${MOCK_SPOT_PRICE:-25000}"
      MOCK_UNDERLYING: "${MOCK_UNDERLYING:-NIFTY}"
      ZERODHA_API_KEY: "${ZERODHA_API_KEY:-}"
      ZERODHA_ACCESS_TOKEN: "${ZERODHA_ACCESS_TOKEN:-}"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 3. Frontend Service (React + Vite + Nginx)
  frontend:
    build:
      context: ./frontend/dashboard-ui
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://backend:8080
    image: zerodha-dashboard-frontend:latest
    container_name: zerodha-frontend
    ports:
      - "5173:80"
    networks:
      zerodha-network:
        ipv4_address: 172.20.0.30
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=http://backend:8080
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost/ || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 4. Frontend Development Service (Hot Reload)
  frontend-dev:
    image: node:20-alpine
    container_name: zerodha-frontend-dev
    working_dir: /app
    volumes:
      - ./frontend/dashboard-ui:/app:cached
      - /app/node_modules
    ports:
      - "5174:5173"
    networks:
      zerodha-network:
        ipv4_address: 172.20.0.40
    command: sh -c "npm ci --legacy-peer-deps && npm run dev -- --host 0.0.0.0"
    environment:
      - VITE_API_BASE_URL=http://backend:8080
    depends_on:
      - backend

  # 5. Test Runner Service (Where Testcontainers runs)
  backend-test:
    image: maven:3.9.6-eclipse-temurin-21
    container_name: zerodha-backend-test
    # Run tests from the module directory inside the container
    working_dir: /app
    command: mvn -B -DskipTests=false test
    volumes:
      - ./backend:/app:cached
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      zerodha-network:
        ipv4_address: 172.20.0.50
    environment:
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE: "/var/run/docker.sock"
      TESTCONTAINERS_RYUK_DISABLED: "true"
      SPRING_TESTCONTAINERS_ENABLED: "false"
    depends_on:
      redis:
        condition: service_healthy
    tty: true

